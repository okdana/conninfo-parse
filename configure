#!/usr/bin/env bash

puts() {
  printf '%s\n' "$*"
}

eputs() {
  printf >&2 '%s: %s\n' "${0##*/}" "$*"
}

put_help() {
  printf '%s\n' \
    'Configure conninfo-parse build' \
    '' \
    'usage:' \
    "  $0 [<option> ...] [<variable>=<value> ...]" \
    '' \
    'options:' \
    '  -h, --help          Display this usage help and exit' \
    '      --prefix <dir>  Specify prefix for `make install`' \
    '      --with-json     Build with JSON support' \
    '      --without-json  Build without JSON support'
}

main() {
  local    prefix with_json
  local -a ch_lns mk_lns mk_vrs

  while (( $# )); do
    case "$1" in
      --)
        shift
        break
        ;;
      -h|--help)
        put_help
        return 0
        ;;
      --prefix)
        (( $# > 1 )) || {
          eputs "expected argument to option: $1"
          return 1
        }
        prefix=$2
        shift 2
        ;;
      --prefix=*)
        prefix=${1#--prefix=}
        shift
        ;;
      --with-json|--with-json-c|--with-jsonc)
        with_json=yes
        shift
        ;;
      --with-json=*|--with-json-c=*|--with-jsonc=*)
        case "${1#*=}" in
          y|yes) with_json=yes ;;
          n|no)  with_json=no  ;;
          *)
            eputs "unrecognised argument to option: $1"
            return 1
            ;;
        esac
        shift
        ;;
      --without-json|--without-json-c|--without-jsonc)
        with_json=no
        shift
        ;;
      -*)
        eputs "illegal option: $1"
        return 1
        ;;
      [^-]*)
        break
        ;;
    esac
  done

  while (( $# )); do
    case "$1" in
      CC=*|CFLAGS=*|CPP=*|CPPFLAGS=*|LDFLAGS=*|LIBS=*|PREFIX=*)
        mk_vrs+=( "$1" "export ${1%%=*}" )
        shift
        ;;
      *)
        eputs "unexpected or invalid operand: $1"
        return 1
        ;;
    esac
  done

  if \
    ! { [[ -n $BASH_VERSION ]] && type -P pkg-config &> /dev/null; } &&
    ! { [[ -n $ZSH_VERSION  ]] && (( $+commands[pkg-config] )); }
  then
    eputs 'pkg-config not found'
    return 1
  fi

  [[ "${with_json:-y}" == y* ]] &&
  if pkg-config --cflags json-c &> /dev/null; then
    with_json=yes
    ch_lns+=( '#define CP_HAVE_JSON 1' )
    mk_lns+=( "CFLAGS += $( pkg-config --cflags json-c )" )
    mk_lns+=( "LIBS   += $( pkg-config --libs   json-c )" )
  elif [[ "$with_json" == y* ]]; then
    eputs 'json-c package information not found'
    return 1
  fi

  if pkg-config --cflags libpq &> /dev/null; then
      mk_lns+=( "CFLAGS += $( pkg-config --cflags libpq )" )
      mk_lns+=( "LIBS   += $( pkg-config --libs   libpq )" )
  else
    eputs 'libpq package information not found'
    return 1
  fi

  printf '%s\n' '// Auto-generated by configure' > config.h
  printf '%s\n' '# Auto-generated by configure'  > config.mk

  [[ -n "${ch_lns[*]}" ]] && printf '%s\n' "${ch_lns[@]}" >> config.h
  [[ -n "${mk_vrs[*]}" ]] && printf '%s\n' "${mk_vrs[@]}" >> config.mk
  printf '%s\n' "${mk_lns[@]}" >> config.mk

  printf '%s\n' \
    'Regenerated config.h and config.mk. Run `make` to build.' \
    '' \
    "Building with JSON support: $with_json"

  return 0
}

main "$@"
